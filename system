#!/bin/bash

function generate_unique_id {
	ID_PREFIX=$1
	[ "" == "${INTERFACE}" ] && INTERFACE=$(ifconfig | grep "^eth" | awk '{print $1}')
	[ "" == "${INTERFACE}" ] && INTERFACE=$(ifconfig | grep "^em" | awk '{print $1}')
	[ "" == "${INTERFACE}" ] && INTERFACE=$(ifconfig | grep "^wlan" | awk '{print $1}')
	if [ "" == "${INTERFACE}" ]; then
		echo "${ID_PREFIX}-xxxxxx"
	else
		MAC=$(ifconfig ${INTERFACE} | grep HWaddr | grep ${INTERFACE} | sed 's/.*HWaddr //g' | sed 's/://g' | sed 's/\ //g')
		echo "${ID_PREFIX}-${MAC}"
	fi
}

function read_bbb_id {
	# BeagleBone-Black
	#
	local EEPROM="/sys/bus/i2c/devices/1-0050/eeprom"
	[ ! -f "${EEPROM}" ] && EEPROM="/sys/bus/i2c/devices/0-0050/eeprom"

	# BeagleBone-Green
	#
	[ ! -f "${EEPROM}" ] && EEPROM="/sys/bus/i2c/devices/0-0050/at24-0/nvmem"

	if [ ! -f "${EEPROM}" ]; then
		echo ""
	else
		local SERIAL=$(hexdump -e '8/1 "%c"' "${EEPROM}" -s 16 -n 12 2>&1)
		echo "${SERIAL}"
	fi
}

function read_rpi2_id {
	ID_PREFIX="rpi2"
	if [ "" == "$(cat /proc/cpuinfo | grep Hardware | grep BCM2709)" ]; then
		echo ""
	else
		echo "${ID_PREFIX}-$(grep -Po '^Serial\s*:\s*\K[[:xdigit:]]{16}' /proc/cpuinfo | sed 's/\ //g')"
	fi
}

function find_unique_id {
	if [ "" != "$(virt-what)" ]; then
		generate_unique_id "vm"
	else
		ID="$(read_bbb_id)"
		[ "" == "${ID}" ] && ID="$(read_rpi2_id)"
		[ "" == "${ID}" ] && ID="$(generate_unique_id "devboard")"
		echo ${ID}
	fi
}

function initiate_linux_os_variables {
	initiate_os_variables
}

function initiate_os_variables {
	export OS_KERNEL=$(uname -s | tr "[A-Z]" "[a-z]")
	[ "darwin" == "${OS_KERNEL}" ] && export OS_DIST_NAME="mac" || export OS_DIST_NAME=$(lsb_release -a 2>/dev/null | grep "^Distributor" | awk '{print $3}' | tr "[A-Z]" "[a-z]")
	[ "darwin" == "${OS_KERNEL}" ] && export OS_DIST_CODENAME="mac" || export OS_DIST_CODENAME=$(lsb_release -a 2>/dev/null | grep "^Codename" | awk '{print $2}' | tr "[A-Z]" "[a-z]")
	[ "darwin" == "${OS_KERNEL}" ] && export HW_CPUS=$(sysctl -n hw.physicalcpu_max) || export HW_CPUS=$(nproc)
	export OS_ARCH=$(uname -m | tr "[A-Z]" "[a-z]")
	export OS_NAME="${OS_KERNEL}-${OS_DIST_NAME}-${OS_DIST_CODENAME}"
}

# Used by bbb-gen-image to produce architecture-specific
# system variables.
#
function generate_os_variable_dump {
	local OUTPUT=$1
	[ "" == "${OUTPUT}" ] && OUTPUT="/opt/system"
	initiate_os_variables
	rm -f ${OUTPUT}
	for v in OS_KERNEL OS_DIST_NAME OS_DIST_CODENAME OS_ARCH OS_NAME; do
		echo -e "${v}\t${!v}" >> ${OUTPUT}
	done
	cat ${OUTPUT} | awk '{printf "\t%s\n", $0}'
}
